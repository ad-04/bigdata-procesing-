# -*- coding: utf-8 -*-
"""DATA 603 Project - 12.11 HP Edits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XLLl8tslyhZW0YI8Ylz8c90kjn9HjoF_

#Step One: Data Pre-Processing and Cleaning
"""



# Commented out IPython magic to ensure Python compatibility.
# %fs head /FileStore/tables/Train_Beneficiarydata_1542865627584.csv

# Commented out IPython magic to ensure Python compatibility.
# %fs head /FileStore/tables/Train_Inpatientdata_1542865627584.csv

# Commented out IPython magic to ensure Python compatibility.
# %fs head /FileStore/tables/Train_Outpatientdata_1542865627584.csv

"""## Importing Libraries and Initializing CSV Files"""

from pyspark.sql.types import *
from pyspark.sql.functions import *


import pyspark  as ps
from pyspark.sql import SparkSession
from pyspark.sql import SQLContext
import matplotlib.pyplot as plt
spark = SparkSession.builder.getOrCreate()
import pandas as pd

#For visualizations
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot  as plt
import numpy as np

#To push data to Hive
appName = "hive_pyspark"
master = "local"
spark = SparkSession.builder.master(master).appName(appName).enableHiveSupport().getOrCreate()

train_outpatient = "/FileStore/tables/Train_Outpatientdata_1542865627584.csv"
train_inpatient = "/FileStore/tables/Train_Inpatientdata_1542865627584.csv"
train_beneficiary = "/FileStore/tables/Train_Beneficiarydata_1542865627584.csv"

"""## Defining Schemas for Datasets"""

train_outpatient_schema = StructType([StructField('BeneID', StringType(), True),
                                      StructField('ClaimID', StringType(), True),
                                      StructField('ClaimStartDt', DateType(), True),
                                      StructField('ClaimEndDt', DateType(), True),
                                      StructField('Provider', StringType(), True),
                                      StructField('InscClaimAmtReimbursed', IntegerType(), True),
                                      StructField('AttendingPhysician', StringType(), True),
                                      StructField('OperatingPhysician', StringType(), True),
                                      StructField('OtherPhysician', StringType(), True),
                                      StructField('ClmDiagnosisCode_1', StringType(), True),
                                      StructField('ClmDiagnosisCode_2', StringType(), True),
                                      StructField('ClmDiagnosisCode_3', StringType(), True),
                                      StructField('ClmDiagnosisCode_4', StringType(), True),
                                      StructField('ClmDiagnosisCode_5', StringType(), True),
                                      StructField('ClmDiagnosisCode_6', StringType(), True),
                                      StructField('ClmDiagnosisCode_7', StringType(), True),
                                      StructField('ClmDiagnosisCode_8', StringType(), True),
                                      StructField('ClmDiagnosisCode_9', StringType(), True),
                                      StructField('ClmDiagnosisCode_10', StringType(), True),
                                      StructField('ClmProcedureCode_1', IntegerType(), True),
                                      StructField('ClmProcedureCode_2', IntegerType(), True),
                                      StructField('ClmProcedureCode_3', IntegerType(), True),
                                      StructField('ClmProcedureCode_4', IntegerType(), True),
                                      StructField('ClmProcedureCode_5', IntegerType(), True),
                                      StructField('ClmProcedureCode_6', IntegerType(), True),
                                      StructField('DeductibleAmtPaid', IntegerType(), True),
                                      StructField('ClmAdmitDiagnosisCode', StringType(), True)])


train_inpatient_schema = StructType([StructField('BeneID', StringType(), True),
                                      StructField('ClaimID', StringType(), True),
                                      StructField('ClaimStartDt', DateType(), True),
                                      StructField('ClaimEndDt', DateType(), True),
                                      StructField('Provider', StringType(), True),
                                      StructField('InscClaimAmtReimbursed', IntegerType(), True),
                                      StructField('AttendingPhysician', StringType(), True),
                                      StructField('OperatingPhysician', StringType(), True),
                                      StructField('OtherPhysician', StringType(), True),
                                      StructField('AdmissionDt', DateType(), True),
                                      StructField('DischargeDt', DateType(), True),
                                      StructField('DiagnosisGroupCode', IntegerType(), True),
                                      StructField('ClmDiagnosisCode_1', StringType(), True),
                                      StructField('ClmDiagnosisCode_2', StringType(), True),
                                      StructField('ClmDiagnosisCode_3', StringType(), True),
                                      StructField('ClmDiagnosisCode_4', StringType(), True),
                                      StructField('ClmDiagnosisCode_5', StringType(), True),
                                      StructField('ClmDiagnosisCode_6', StringType(), True),
                                      StructField('ClmDiagnosisCode_7', StringType(), True),
                                      StructField('ClmDiagnosisCode_8', StringType(), True),
                                      StructField('ClmDiagnosisCode_9', StringType(), True),
                                      StructField('ClmDiagnosisCode_10', StringType(), True),
                                      StructField('ClmProcedureCode_1', IntegerType(), True),
                                      StructField('ClmProcedureCode_2', IntegerType(), True),
                                      StructField('ClmProcedureCode_3', IntegerType(), True),
                                      StructField('ClmProcedureCode_4', IntegerType(), True),
                                      StructField('ClmProcedureCode_5', IntegerType(), True),
                                      StructField('ClmProcedureCode_6', IntegerType(), True),
                                      StructField('DeductibleAmtPaid', IntegerType(), True),
                                      StructField('ClmAdmitDiagnosisCode', StringType(), True)])

train_beneficiary_schema = StructType([StructField('BeneID', StringType(), True),
                                      StructField('Gender', IntegerType(), True),
                                      StructField('Race', IntegerType(), True),
                                      StructField('DOD', DateType(), True),
                                      StructField('DOB', DateType(), True),
                                      StructField('RenalDiseaseIndicator', StringType(), True),
                                      StructField('State', IntegerType(), True),
                                      StructField('County', IntegerType(), True),
                                      StructField('NoOfMonths_PartACov', IntegerType(), True),
                                      StructField('NoOfMonths_PartBCov', IntegerType(), True),
                                      StructField('ChronicCond_Alzheimer', IntegerType(), True),
                                      StructField('ChronicCond_Heartfailure', IntegerType(), True),
                                      StructField('ChronicCond_KidneyDisease', IntegerType(), True),
                                      StructField('ChronicCond_Cancer', IntegerType(), True),
                                      StructField('ChronicCond_ObstrPulmonary', IntegerType(), True),
                                      StructField('ChronicCond_Depression', IntegerType(), True),
                                      StructField('ChronicCond_Diabetes', IntegerType(), True),
                                      StructField('ChronicCond_IschemicHeart', IntegerType(), True),
                                      StructField('ChronicCond_Osteoporasis', IntegerType(), True),
                                      StructField('ChronicCond_rheumatoidarthritis', IntegerType(), True),
                                      StructField('ChronicCond_stroke', IntegerType(), True),
                                      StructField('IPAnnualReimbursementAmt', IntegerType(), True),
                                      StructField('IPAnnualDeductibleAmt', IntegerType(), True),
                                      StructField('OPAnnualReimbursementAmt', IntegerType(), True),
                                      StructField('OPAnnualDeductibleAmt', IntegerType(), True)])

"""##Reading CSV Files and Caching Dataframes"""

train_outpatient_df = spark.read.csv(train_outpatient, header=True, inferSchema=True, dateFormat = 'yyyy-mm-dd')
train_inpatient_df = spark.read.csv(train_inpatient, header=True, inferSchema=True, dateFormat = 'yyyy-mm-dd')
train_beneficiary_df = spark.read.csv(train_beneficiary, header=True, inferSchema=True, dateFormat = 'yyyy-MM-dd')

train_outpatient_df.cache()
train_inpatient_df.cache()
train_beneficiary_df.cache()

"""## Previewing Dataframes"""

#dataframes are in order

train_beneficiary_df.display()
train_inpatient_df.display()
train_outpatient_df.display()

"""## Renaming Columns in 'train_outpatient_df' and Previewing Dataframe

We have renamed few columns in train_outpatient_df because some of the columns in train_outpatient_df have the same name as train_inpatient_df.
"""

train_outpatient_df = train_outpatient_df.selectExpr('BeneID',
                                                     'claimID AS train_outpatient_ClaimID',
                                                     'ClaimStartDt AS train_outpatient_ClaimStartDt',
                                                     'ClaimEndDt AS train_outpatient_ClaimEndDt',
                                                     'Provider AS train_outpatient_Provider',
                                                     'InscClaimAmtReimbursed AS train_outpatient_InscClaimAmtReimbursed',
                                                     'AttendingPhysician AS train_outpatient_AttendingPhysician',
                                                     'OperatingPhysician AS train_outpatient_OperatingPhysician',
                                                     'OtherPhysician AS train_outpatient_OtherPhysician',
                                                     'ClmDiagnosisCode_1 AS train_outpatient_ClmDiagnosisCode_1',
                                                     'ClmDiagnosisCode_2 AS train_outpatient_ClmDiagnosisCode_2',
                                                     'ClmDiagnosisCode_3 AS train_outpatient_ClmDiagnosisCode_3',
                                                     'ClmDiagnosisCode_4 AS train_outpatient_ClmDiagnosisCode_4',
                                                     'ClmDiagnosisCode_5 AS train_outpatient_ClmDiagnosisCode_5',
                                                     'ClmDiagnosisCode_6 AS train_outpatient_ClmDiagnosisCode_6',
                                                     'ClmDiagnosisCode_7 AS train_outpatient_ClmDiagnosisCode_7',
                                                     'ClmDiagnosisCode_8 AS train_outpatient_ClmDiagnosisCode_8',
                                                     'ClmDiagnosisCode_9 AS train_outpatient_ClmDiagnosisCode_9',
                                                     'ClmDiagnosisCode_10 AS train_outpatient_ClmDiagnosisCode_10',
                                                     'ClmProcedureCode_1 AS train_outpatient_ClmProcedureCode_1',
                                                     'ClmProcedureCode_2 AS train_outpatient_ClmProcedureCode_2',
                                                     'ClmProcedureCode_3 AS train_outpatient_ClmProcedureCode_3',
                                                     'ClmProcedureCode_4 AS train_outpatient_ClmProcedureCode_4',
                                                     'ClmProcedureCode_5 AS train_outpatient_ClmProcedureCode_5',
                                                     'ClmProcedureCode_6 AS train_outpatient_ClmProcedureCode_6',
                                                     'DeductibleAmtPaid AS train_outpatient_DeductibleAmtPaid',
                                                     'ClmAdmitDiagnosisCode AS train_outpatient_ClmAdmitDiagnosisCode')

train_outpatient_df.display()

"""## Join 3 Dataframes and Drop Duplicate Rows

We have joined all 3 dataframes using the 'BeneID' column as the primary key. This column is important as it contains and represents unique identification characters for beneficiaries who are members of this healthcare insurance company.

After joining all three columns, we also dropped duplicate rows as we noticed that a lot of the rows were duplicating themselves with the same BeneID as well as claimID and claim amounts.
"""

bene_inpatient = train_beneficiary_df.join(train_inpatient_df, train_beneficiary_df['BeneID'] == train_inpatient_df['BeneID'],'inner').drop(train_inpatient_df['BeneID'])


bene_patient_joined = bene_inpatient.join(train_outpatient_df, bene_inpatient['BeneID'] == train_outpatient_df['BeneID'], 'inner').drop(train_outpatient_df['BeneID'])

bene_patient_joined.display()

"""##Dropping Columns

These columns do not help our analysis that will eventually aid the insurance make decisions such as when and if to raise insurance premiums for the beneficiaries and by how much. Also, information such as based on the amount of people with a certain disease, can the insurance company partner with third parties to maximize beneficiary's benefits such as online pharmacy for older folks.
"""

bene_patient_joined = bene_patient_joined.drop('NoOfMonths_PartACov',
                                               'County',
                                     'NoOfMonths_PartBCov',
                                     'AttendingPhysician',
                                     'OperatingPhysician',
                                     'OtherPhysician',
                                     'Provider',
                                     'ClmDiagnosisCode_1',
                                     'ClmDiagnosisCode_2',
                                     'ClmDiagnosisCode_3',
                                     'ClmDiagnosisCode_4',
                                     'ClmDiagnosisCode_5',
                                     'ClmDiagnosisCode_6',
                                     'ClmDiagnosisCode_7',
                                     'ClmDiagnosisCode_8',
                                     'ClmDiagnosisCode_9',
                                     'ClmDiagnosisCode_10',
                                     'ClmProcedureCode_1',
                                     'ClmProcedureCode_2',
                                     'ClmProcedureCode_3',
                                     'ClmProcedureCode_4',
                                     'ClmProcedureCode_5',
                                     'ClmProcedureCode_6',
                                     'ClmAdmitDiagnosisCode',
                                     'DiagnosisGroupCode',
                                     'train_outpatient_Provider',
                                     'train_outpatient_AttendingPhysician',
                                     'train_outpatient_OperatingPhysician',
                                     'train_outpatient_OtherPhysician',
                                     'train_outpatient_ClmDiagnosisCode_1',
                                     'train_outpatient_ClmDiagnosisCode_2',
                                     'train_outpatient_ClmDiagnosisCode_3',
                                     'train_outpatient_ClmDiagnosisCode_4',
                                     'train_outpatient_ClmDiagnosisCode_5',
                                     'train_outpatient_ClmDiagnosisCode_6',
                                     'train_outpatient_ClmDiagnosisCode_7',
                                     'train_outpatient_ClmDiagnosisCode_8',
                                     'train_outpatient_ClmDiagnosisCode_9',
                                     'train_outpatient_ClmDiagnosisCode_10',
                                     'train_outpatient_ClmProcedureCode_1',
                                     'train_outpatient_ClmProcedureCode_2',
                                     'train_outpatient_ClmProcedureCode_3',
                                     'train_outpatient_ClmProcedureCode_4',
                                     'train_outpatient_ClmProcedureCode_5',
                                     'train_outpatient_ClmProcedureCode_6',
                                     'train_outpatient_ClmAdmitDiagnosisCode',
                                     'ClaimID',
                                     'train_outpatient_ClaimID',
                                     'ClaimStartDt',
                                     'ClaimEndDt',
                                     'AdmissionDt',
                                     'DischargeDt',
                                     'train_outpatient_ClaimStartDt',
                                     'train_outpatient_ClaimEndDt')

"""## Removing Nulls

The GroupBy and Count functions help to see if there are are null values in the remaining columns and if to remove those columns should there be high percentage of null values.
"""

bene_patient_joined.groupBy("BeneID").count().display()
bene_patient_joined.groupBy("DOB").count().display()
bene_patient_joined.groupBy("DOD").count().display()
bene_patient_joined.groupBy("Race").count().display()
bene_patient_joined.groupBy("RenalDiseaseIndicator").count().display()
bene_patient_joined.groupBy("State").count().display()
bene_patient_joined.groupBy("ChronicCond_Alzheimer").count().display() ##this one
bene_patient_joined.groupBy("ChronicCond_Heartfailure").count().display() ##this one
bene_patient_joined.groupBy("ChronicCond_KidneyDisease").count().display()
bene_patient_joined.groupBy("ChronicCond_ObstrPulmonary").count().display()
bene_patient_joined.groupBy("ChronicCond_Cancer").count().display() ##this one
bene_patient_joined.groupBy("ChronicCond_Depression").count().display()
bene_patient_joined.groupBy("ChronicCond_Diabetes").count().display() ##this one
bene_patient_joined.groupBy("ChronicCond_IschemicHeart").count().display()
bene_patient_joined.groupBy("ChronicCond_Osteoporasis").count().display()
bene_patient_joined.groupBy("ChronicCond_rheumatoidarthritis").count().display()
bene_patient_joined.groupBy("ChronicCond_stroke").count().display() ##this one
bene_patient_joined.groupBy("IPAnnualReimbursementAmt").count().display()
bene_patient_joined.groupBy("IPAnnualDeductibleAmt").count().display()
bene_patient_joined.groupBy("OPAnnualReimbursementAmt").count().display()
bene_patient_joined.groupBy("OPAnnualDeductibleAmt").count().display()
bene_patient_joined.groupBy("InscClaimAmtReimbursed").count().display()
bene_patient_joined.groupBy("DeductibleAmtPaid").count().display()
bene_patient_joined.groupBy("train_outpatient_InscClaimAmtReimbursed").count().display()

"""##Renaming Column Values"""

bene_patient_joined = bene_patient_joined.withColumn('Gender', regexp_replace('Gender', '1', 'Female'))
bene_patient_joined = bene_patient_joined.withColumn('Gender', regexp_replace('Gender', '2', 'Male'))

bene_patient_joined = bene_patient_joined.withColumn('RenalDiseaseIndicator', regexp_replace('RenalDiseaseIndicator', '0', 'No'))
bene_patient_joined = bene_patient_joined.withColumn('RenalDiseaseIndicator', regexp_replace('RenalDiseaseIndicator', 'Y', 'Yes'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Alzheimer', regexp_replace('ChronicCond_Alzheimer', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Alzheimer', regexp_replace('ChronicCond_Alzheimer', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Heartfailure', regexp_replace('ChronicCond_Heartfailure', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Heartfailure', regexp_replace('ChronicCond_Heartfailure', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_KidneyDisease', regexp_replace('ChronicCond_KidneyDisease', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_KidneyDisease', regexp_replace('ChronicCond_KidneyDisease', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Cancer', regexp_replace('ChronicCond_Cancer', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Cancer', regexp_replace('ChronicCond_Cancer', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_ObstrPulmonary', regexp_replace('ChronicCond_ObstrPulmonary', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_ObstrPulmonary', regexp_replace('ChronicCond_ObstrPulmonary', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Depression', regexp_replace('ChronicCond_Depression', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Depression', regexp_replace('ChronicCond_Depression', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Diabetes', regexp_replace('ChronicCond_Diabetes', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Diabetes', regexp_replace('ChronicCond_Diabetes', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_IschemicHeart', regexp_replace('ChronicCond_IschemicHeart', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_IschemicHeart', regexp_replace('ChronicCond_IschemicHeart', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Osteoporasis', regexp_replace('ChronicCond_Osteoporasis', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_Osteoporasis', regexp_replace('ChronicCond_Osteoporasis', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_rheumatoidarthritis', regexp_replace('ChronicCond_rheumatoidarthritis', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_rheumatoidarthritis', regexp_replace('ChronicCond_rheumatoidarthritis', '2', 'No'))

bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_stroke', regexp_replace('ChronicCond_stroke', '1', 'Yes'))
bene_patient_joined = bene_patient_joined.withColumn('ChronicCond_stroke', regexp_replace('ChronicCond_stroke', '2', 'No'))


#Assigning race randomly to numbers 1-5 based on research source: (Chou, 2019)

bene_patient_joined = bene_patient_joined.withColumn('Race', regexp_replace('Race', '1', 'African'))
bene_patient_joined = bene_patient_joined.withColumn('Race', regexp_replace('Race', '2', 'European'))
bene_patient_joined = bene_patient_joined.withColumn('Race', regexp_replace('Race', '3', 'Asian'))
bene_patient_joined = bene_patient_joined.withColumn('Race', regexp_replace('Race', '4', 'Oceania'))
bene_patient_joined = bene_patient_joined.withColumn('Race', regexp_replace('Race', '5', 'Native American'))

"""## Display Final DataFrame After Data Pre-Processing"""

bene_patient_joined.display()

"""# Step Two: Exploratory Data Analysis (EDA)

##General EDA
"""

df_rows = bene_patient_joined.count()
df_cols = len(bene_patient_joined.columns)

print("The number of rows is:", df_rows)
print("The number of columns is:", df_cols)

bene_patient_joined_pd = bene_patient_joined.toPandas()

bene_patient_joined_pd.head()

bene_patient_joined_pd.dtypes

bene_patient_joined_pd.describe()

"""There are 26,713 unique beneficiary IDs in this dataset. Or 26,713 people that are being looked at in this dataset. However, we see that there are more female and male members below. This is due to the fact that a single member can be booked for several different claims for multiple diseases. For example, a member can have diabetes and kidney disease as the two diseases have a connection.

We wanted to find out unique set of 'BeneID' in this dataset to get a sense of the true size of dataset in terms of how many members are included here.
"""

unique_beneID = bene_patient_joined.select(count_distinct("BeneID")).display()

"""##Member Analysis By Gender"""

gender_count = bene_patient_joined_pd['Gender'].value_counts()

print("The number of female and male members in this dataset are: \n",  gender_count)

#setting size of bar plot
plt.figure(figsize = (10,8))

#creating bar plot and setting the features such as color
gender_count = bene_patient_joined_pd['Gender'].value_counts().plot(kind = "bar", color = ['royalblue', 'lightpink'])

#Creating labels and title
gender_count.set_title(' \n Distribution of Members by Gender \n ', fontsize = 16, fontweight = 'bold')
gender_count.set_xlabel(' \n Gender \n ', fontsize = 15)
gender_count.set_ylabel(' \n Member Count \n ', fontsize = 15)
plt.xticks(rotation = 0, size = 12)

#Annotating the bars and adding the counts as numbers on top of each graph using the "patches" function.
for bargraph in gender_count.patches:
    gender_count.text (bargraph.get_x() + bargraph.get_width() / 2,
                       bargraph.get_height() + 0.75, bargraph.get_height(),
                       horizontalalignment = 'center',
                       fontsize = 12)

"""## Member Analysis by Age

Here, we have converted the 'DOD' (Date of Death) column into 'Datetime64[ns]' datatype from object as we need to use this column to calculate the age for each member. The original datatype of 'DOD' column was string as there were a lot of null values and that was the incorrect datatype.
"""

bene_patient_joined_pd['DOD'] = pd.to_datetime(bene_patient_joined_pd['DOD'], errors = 'coerce')
bene_patient_joined_pd['DOB'] = pd.to_datetime(bene_patient_joined_pd['DOB'], errors = 'coerce')

bene_patient_joined_pd.dtypes

bene_patient_joined_pd['DOD'].describe(datetime_is_numeric = True)

"""From above description of 'DOD' column, we can see there are only 942 counts of non-null values from 173,582 rows. That is less than a percentage of people that have a Date of Death associated with their Bene IDs, therefore, we will replace the rest of the null values in 'DOD' column with the highest DOD."""

bene_patient_joined_pd['DOD'].fillna(value = '2009-12-01', inplace = True)

bene_patient_joined_pd['DOD'].value_counts()

"""This new column 'Member Age' is to calculate the age of each member so that we can further use the 'age' feature against members' residence by state or frequencies of diseases by age. If there are more elder aged members then the company can focus its resources towards that age group. The company can also participate with third parties such as online pharmacy, mobile physical therapists or mental health therapists, as well as physicians who specialize in geriatrics."""

bene_patient_joined_pd['Member Age'] = np.round(((bene_patient_joined_pd['DOD'] - bene_patient_joined_pd['DOB']).dt.days)/365.0,1)

bene_patient_joined_pd.head() #confirming to see if column was added

bene_patient_joined_pd['Member Age'].describe()

"""From this distribution, we can conclude that majority of the members are aged between 65 to almost 90 years old. From this data, the healthcare insurance compnay can split up the members in certain age buckets so that they can better serve their members' needs. For the younger members, there can be certain plans that don't involve mobile clinics or online pharmacies -- instead, these services can be offered to the older members for a fee should they choose to retain these services.

Moreover, there can be further analysis done on whether or not members at a particular age are more prone to certain diseases. If they have these disease(s), then the insurance company can look into increasing their deductibles for inpatient services as those are most expensive and resource heavy (Leena, 2022). This will help the company maintain it's bottom line while hedging their risks.
"""

sns.set_theme(style = "whitegrid")

plt.figure(figsize = (10,8))

sns.histplot(data = bene_patient_joined_pd,
             x = "Member Age",
             bins = 20,
             palette = "RdBu")

plt.title(' \n Distribution of Member Age \n ', fontsize = 18)
plt.xlabel(' \n Member Age (years) \n ', fontsize = 16)
plt.ylabel(' \n Frequency \n ', fontsize = 16)

"""## Member Analysis by Gender and Age

From below histogram, we see there are a lot more male members than female members at most age intervals.
"""

plt.figure(figsize = (12,10))

sns.histplot(data = bene_patient_joined_pd,
             x = "Member Age",
             bins = 20,
             hue = "Gender",
             multiple = "dodge",
             palette = "RdBu",
             shrink = 0.8)

plt.title(' \n Distribution of Member Ages by Gender \n ', fontsize = 18)
plt.xlabel(' \n Member Age (years) \n ', fontsize = 16)
plt.ylabel(' \n Frequency \n ', fontsize = 16)

"""From the scatterplot below, we can see that the insurance company pays the most inpatient reimbursement amounts for members aged 50 and above. This means that the insurance company has to pay more for members aged 50 and more, regardless of the type of chronic condition(s) that they might have. In some cases, the outliers go beyond $120,000 in inpatient reimbursement amount."""

sns.set_theme(style = "whitegrid")

plt.figure(figsize = (12,12))

sns.scatterplot(data = bene_patient_joined_pd,
                x = 'Member Age',
                y = 'IPAnnualReimbursementAmt',
                hue = 'Gender',
                palette = 'RdBu').set(title = 'Member Age and Annual Inpatient Reimbursement Amounts by Gender')

"""## Member Analysis by State

For this dataset, US states are assumed to be in alpabetical order. For example, 1 = Alabama, 2 = Alaska, etc. 51 = D.C., 52= Puerto Rico, 53 = Guam, 54 = U.S. Virgin Islands (source: (List of states in the United States 2016)).

Here, State 5 (California) has the highest number of members  at 16,554 members. This is important because the insurance company can expand its business in California to better serve its customers as well as attract more customers. Or on the contrary, for those states and territories that do not have many members, the company can opt to shut down all operations and leave one or two buildings for operational purposes to save on overhead costs and maintenance.
"""

sns.set_theme(style = "whitegrid")

countplt, state_members = plt.subplots(figsize = (30,12))


#Drawing the bar plot

state_members = sns.countplot(x = bene_patient_joined_pd['State'],
                              palette = "RdBu")


#Adding Chart and Axes Titles

state_members.set_title(' \n Members by State \n ', fontsize = 18, fontweight = 'bold')
state_members.set_xlabel(' \n State \n ', fontsize = 15)
state_members.set_ylabel(' \n Member Count \n ', fontsize = 15)

for bargraph in state_members.patches:
    state_members.text (bargraph.get_x() + bargraph.get_width() / 2,
                        bargraph.get_height() + 0.75, bargraph.get_height(),
                        horizontalalignment = 'center',
                        fontsize = 12)

"""The boxplot below depicts the age of each member by state and further breaks it down by gender to show the age range in each state by the gender. This is important because it gives insight into the members as to where they live and what their age is so that the insurance company can provide additional services such specific to those features."""

plt.figure(figsize = (25,10))

sns.set_theme(style = "ticks", palette = "pastel")

sns.boxplot(x = "State", y = "Member Age",
            hue = "Gender", palette = "RdBu",
            data = bene_patient_joined_pd)

sns.despine(offset = 10, trim = True)

for bargraph in state_members.patches:
    state_members.text (bargraph.get_x() + bargraph.get_width() / 2,
                        bargraph.get_height() + 0.75, bargraph.get_height(),
                        horizontalalignment = 'center',
                        fontsize = 11)

"""## Member Analysis by Renal Disease Indicator and Chronic Kidney Disease and Medical Expenses

Chronic renal disease is also known as chronic kidney disease (CKD) in which diabetes and high blood pressure are the most common cause of kidney disease. CKD is when the kidney function deteriorates overtime and fluid, electrolytes, and waste build up int he body. Risk factors for CKD include diabetes, older age, smoking, and heart disease (Mayo Foundation for Medical Education and Research, 2021).

If a member has the Renal Disease Indicator, then Y = yes and there is indicator for renal disease. This does not mean that the person has renal disease, but rather indicators that they may have it. If a member does not have the Renal Disease Indicator, then 0 = no indicator for renal disease.

As chronic renal disease is related to chronic kidney disease, it's so that imporant to look at how many people have chronic kidney disease and by what age group. It's also imporant to note that the renal disease indicator only means that a person might have renal diease or issues around kidney failure. The presence of chronic kidney disease means that a person has long-term kidney disease brought on by multiple causes.

In order to better help their members and their families, it's imporant that the insurance company looks at data as to what percentage of its members have chronic renal disease. The health insurance company can partner with third party company such as a clinic that provides dialysis treatments. Insurance company can also provide a subcription to a diabetes monitoring machine that the members can pay a subscription fee for as an added service.

To watch the company's bottom line, health insurance company can check if certain members have the risk factors mentioned earlier. If a member does have those risk factors, then the health insurance company can increase their premiums by a factor as they would pose a higher risk to the company.

Below summary of the Renal Disease Indicator feature by member age and gender shows that most members do not have the renal disease indicator. However, more male member have renal disease indicators at 35,234 males compared to females at 24,477. More male member do not have renal disease indicators at 65,770 males compared to females at 48,101.

The minimum age for males with renal disease indicator is 26.1 years and maximum is 75.41. The minimum age for females with renal disease indicator is 26.2 years and maximum is 72.75. One thing we can conclude is that females are prone to reporting this indicator a bit later than males and also live a bit younger with this indicator.
"""

renal_disease = bene_patient_joined_pd.groupby(['Gender', 'RenalDiseaseIndicator'])['Member Age'].aggregate({'min', 'max', "mean", "count"})
print(renal_disease)

sns.set_theme(style = "whitegrid")

countplt, gender_renal = plt.subplots(figsize = (8,11))

#Drawing the bar plot
gender_renal = sns.countplot(data = bene_patient_joined_pd,
                             x = 'RenalDiseaseIndicator',
                             palette = "RdBu",
                             hue = 'Gender')

#Adding Chart and Axes Titles
gender_renal.set_title(' \n Renal Disease Indicator by Gender \n ', fontsize = 18, fontweight = 'bold')
gender_renal.set_xlabel(' \n Renal Disease Indicator \n ', fontsize = 15)
gender_renal.set_ylabel(' \n Member Count \n ', fontsize = 15)


for bargraph in gender_renal.patches:
    gender_renal.text (bargraph.get_x() + bargraph.get_width() / 2,
                       bargraph.get_height() + 0.75,
                       bargraph.get_height(), horizontalalignment = 'center',
                       fontsize = 11)

"""Below summary of the Renal Disease Indicator feature by member age and gender shows that most members do have chronic kidney disease. More male members have chronic kidney disease at 69,222 males compared to females at 49,939. More male members do not have chronic kidney disease indicators at 31,782 males compared to females at 22,639.

The minimum age for males with chronic kidney disease is 26.1 years and maximum is 75.47. The minimum age for females with chronic kidney disease is 26.2 years and maximum is 72.90. One thing we can conclude is that females with chronic kidney disease detect this disease a bit later than males and also live a bit younger with this disease.
"""

kidney_disease = bene_patient_joined_pd.groupby(['Gender', 'ChronicCond_KidneyDisease'])['Member Age'].aggregate({'min', 'max', "mean", "count"})

print(kidney_disease)

sns.set_theme(style = "whitegrid")

countplt, gender_kidney = plt.subplots(figsize = (8,11))


#Drawing the bar plot

gender_kidney = sns.countplot(data = bene_patient_joined_pd,
                              x = 'ChronicCond_KidneyDisease',
                              palette = "RdBu",
                              hue = 'Gender')


#Adding Chart and Axes Titles

gender_kidney.set_title(' \n Chronic Kidney Disease by Gender \n ', fontsize = 18, fontweight = 'bold')
gender_kidney.set_xlabel(' \n Chronic Kidney Disease \n ', fontsize = 15)
gender_kidney.set_ylabel(' \n Member Count \n ', fontsize = 15)
plt.xticks(fontsize = 13)


for bargraph in gender_kidney.patches:
    gender_kidney.text (bargraph.get_x() + bargraph.get_width() / 2,
                        bargraph.get_height() + 0.75, bargraph.get_height(),
                        horizontalalignment = 'center',
                        fontsize = 11)

"""### Members with Renal Disease Indicator and Chronic Kidney Disease

Here we are looking at members who might have renal disease indicator (RDI) and chronic kidney disease (CKD). It's interesting to note that the number of members who do have RDI, but not CKD is 62,637, the highest of all. However, those that have RDI as well as CKD is the second highest number at 56,524 members.

This analysis is imporant here because the insurance company can look at the number of members who do have RDI and CKD and see what the percentage is overall. If the number is high, then they can increase their premiums as well as offer servies such as kidney dialysis or offer rideshare services for a small fee for clinical visits.
"""

kidney_renal = bene_patient_joined_pd.groupby(['ChronicCond_KidneyDisease', 'RenalDiseaseIndicator'])['Member Age'].aggregate({'min', 'max', "mean", "count"})

print(kidney_renal)

sns.set_theme(style = "whitegrid")

countplt, kidney_renal = plt.subplots(figsize = (10,11))


#Drawing the bar plot

kidney_renal = bene_patient_joined_pd.groupby(['RenalDiseaseIndicator','ChronicCond_KidneyDisease'])['Member Age'].count().plot(kind='bar', color = ['yellow','pink','orange','grey'])


#Adding Chart and Axes Titles

kidney_renal.set_title('\n Presence of Renal Disease Indicator and Chronic Kidney Disease Amongst Members \n', fontsize = 18, fontweight = 'bold')
kidney_renal.set_xlabel('\n Presence of Renal Disease Indicator (RDI) and Chronic Kidney Disease (CKD)', fontsize = 15)
plt.xticks(labels=[("No RDI","No CKD"), ("No RDI","Yes CKD"), ("Yes RDI","No CKD"), ("Yes RDI","Yes CKD")], ticks = [0,1,2,3], rotation = 40, size = 12)
kidney_renal.set_ylabel('\n Member Count\n', fontsize = 15)
plt.minorticks_on()


for bargraph in kidney_renal.patches:
    kidney_renal.text (bargraph.get_x() + bargraph.get_width() / 2,
                       bargraph.get_height() + 0.75, bargraph.get_height(),
                       horizontalalignment = 'center',
                       fontsize = 11)

"""### Chronic Kidney Disease and Annual Inpatient Deductible and Reimbursement Expenses Amongst Members

The first graph tells us that those members with CKD pays a higher annual inpatient deductible amount than members who do not have CKD. This seems accurate as the members with CKD might need more medical services such as kidney dialysis and services such as this are more expensive. Since a higher number of members do have CKD, the insurance company can partner with third party companies such as rideshare servies to take them to clinical appointments and treatments or even offer dialysis machines at a lower cost.

The second graph tells us that the insurance company pays a lot more in annual inpatient reimbursement amount for members with CKD compared to those without CKD.

Further analysis will focus on inpatient expenses as inpatient services cost more, both for the members as well as the insurance company as they require extensives services such as operations, consultants with specialized doctors, and resources such as personnel and hospital stays.

Deductible is a flat or fixed amount that the member is responsible to pay for whether it is an inpatient or outpatient service. And an annual reimbursement amount is amount allocated to a member depending on their insurance plan. Such as paying $10,000 as reimbursement after the deductible and copayment is paid by the member.
"""

sns.set_theme(style = "whitegrid")
plt.figure(figsize = (8,11))

kidney_IPAnnDeduc = bene_patient_joined_pd.groupby(['ChronicCond_KidneyDisease'])['IPAnnualDeductibleAmt'].mean().plot(kind='bar', color = ['lightcoral','lightgreen'])

kidney_IPAnnDeduc.set_title(' \n Chronic Kidney Disease and Annual Inpatient Deductible \n ', fontsize = 18, fontweight = 'bold')
kidney_IPAnnDeduc.set_xlabel(' \n Presence of Chronic Kidney Disease \n ', fontsize = 15)
kidney_IPAnnDeduc.set_ylabel(' \n Total Annual Average for Inpatient Deductible (in thousands of U.S.Dollars) \n ', fontsize = 15)
plt.xticks(fontsize = 13, rotation = 0)


for bargraph in kidney_IPAnnDeduc.patches:
    kidney_IPAnnDeduc.text (bargraph.get_x() + bargraph.get_width() / 2,
              bargraph.get_height() + 0.75, '{0:.2f}'.format(bargraph.get_height()),
              horizontalalignment = 'center', fontsize = 11)

sns.set_theme(style = "whitegrid")
plt.figure(figsize = (8,11))

kidney_IPAnnReim = bene_patient_joined_pd.groupby(['ChronicCond_KidneyDisease'])['IPAnnualReimbursementAmt'].mean().plot(kind='bar', color = ['lightcoral','lightgreen'])

kidney_IPAnnReim.set_title(' \n Chronic Kidney Disease and Annual Inpatient Reimbursement \n ', fontsize = 18, fontweight = 'bold')
kidney_IPAnnReim.set_xlabel(' \n Presence of Chronic Kidney Disease \n ', fontsize = 15)
kidney_IPAnnReim.set_ylabel(' \n Total Annual Average for Inpatient Reimbursement (in thousands of U.S. Dollars) \n ', fontsize = 15)
plt.xticks(fontsize = 13, rotation = 0)


for bargraph in kidney_IPAnnReim.patches:
    kidney_IPAnnReim.text (bargraph.get_x() + bargraph.get_width() / 2,
              bargraph.get_height() + 0.75, '{0:.2f}'.format(bargraph.get_height()),
              horizontalalignment = 'center', fontsize = 11)

"""The Chi-Squared test results from above between 'Gender' and 'RenalDiseaseIndicator' shows that there is no correlation between the two variables as the p-value is 5.51, which is way above 0.5. Therefore, we fail to reject the null hypothesis as there is no correlation between gender and those members with Renal Disease Indicator.

***

The Chi-Squared test results from above between 'Gender' and 'ChronicCond_KidneyDisease' shows that there is strong correlation between the two variables as the p-value is 0.22, which is less than 0.5. Therefore, we reject the null hypothesis as there is a strong correlation between gender and those members with chronic kidney disease.

***

The Chi-Squared test results from above between 'RenalDiseaseIndicator' and 'ChronicCond_KidneyDisease' shows that there is strong correlation between the two variables as the p-value is 0.00. Therefore, we reject the null hypothesis as there is a strong correlation between Renal Disease Indicator present and those members with chronic kidney disease. As there is strong relation between the two variables, the insurance company can screen the members that are more susceptible to get kidney disease disease so that the insurance company is not bearing a higher reimbursement expense. Another option is for the insurance company to either increase the members' deductible so that the company will lower their reimbursement expense. This analysis can also be useful to the insurance company can partner with third party companies such as rideshare servies to take them to clinical appointments and treatments or even offer dialysis machines at a lower cost.
"""

CrosstabResult=pd.crosstab(index=bene_patient_joined_pd['RenalDiseaseIndicator'],
                           columns=bene_patient_joined_pd['Gender'])
print(CrosstabResult)

# importing the required function
from scipy.stats import chi2_contingency

# Performing Chi-sq test
ChiSqResult = chi2_contingency(CrosstabResult)

# P-Value is the Probability of H0 being True
# If P-Value&gt;0.05 then only we Accept the assumption(H0)

print('The P-Value of the ChiSq Test is:', ChiSqResult[1])

CrosstabResult.plot.bar(figsize = (8, 11), rot = 0)

CrosstabResult=pd.crosstab(index=bene_patient_joined_pd['ChronicCond_KidneyDisease'],
                           columns=bene_patient_joined_pd['Gender'])
print(CrosstabResult)

# importing the required function
from scipy.stats import chi2_contingency

# Performing Chi-sq test
ChiSqResult = chi2_contingency(CrosstabResult)

# P-Value is the Probability of H0 being True
# If P-Value&gt;0.05 then only we Accept the assumption(H0)

print('The P-Value of the ChiSq Test is:', ChiSqResult[1])

CrosstabResult.plot.bar(figsize = (8, 11), rot = 0)

CrosstabResult=pd.crosstab(index=bene_patient_joined_pd['ChronicCond_KidneyDisease'],
                           columns=bene_patient_joined_pd['RenalDiseaseIndicator'])
print(CrosstabResult)

# importing the required function
from scipy.stats import chi2_contingency

# Performing Chi-sq test
ChiSqResult = chi2_contingency(CrosstabResult)

# P-Value is the Probability of H0 being True
# If P-Value&gt;0.05 then only we Accept the assumption(H0)

print('The P-Value of the ChiSq Test is:', ChiSqResult[1])

CrosstabResult.plot.bar(figsize = (8, 11), rot = 0)

"""##  Member Analysis by Cancer and Medical Expenses

Cancer is a disease that is widespread across U.S. as 1 in 3 people are affected by it and there are multiple forms of cancer such as liver cancer and skin cancer (American Cancer Society). Cancer is caused by many reasons such as lifestyle change, genes obtained from parents or family, and being exposed to certain elements such as sun that causes skin cancer. There are stages of cancer that measure the severity of the disease such as State 1, 2, 3, and 4, with Stage 4 being terminal and fatal. Unfortunately, there is no cure for cancer, but there are treatments such as chemo therapy that can kill the cancer cells in one's body. Many people go into remission which means the cancer has shrunk to a certain degree (American Cancer Society).

In order to better help their members and their families, it's imporant that the insurance company looks at data as to what percentage of its members have cancer. The health insurance company can partner with third party company such as a clinic that provides chemo treatments. The insurance company can also provide therapy services for those members that need it to talk to a license therapist.

To watch the company's bottom line, the health insurance company can increase their inpatient deductibles or copayments by a factor as they would pose a higher risk to the company.

Below summary of cancer feature by member age and gender shows that most members do not have cancer. However, more male members do not have cancer at 79,514 males compared to females at 55,981. More male members do have cancer at 21,490 males compared to females at 16,597.

The minimum age for males with cancer is 26.1 years and maximum is 75.11. The minimum age for females with cancer is 26.1 years and maximum is 72.53. One thing we can conclude is that females are prone to reporting this indicator a bit later than males and also live a bit younger with this indicator.
"""

cancer_analysis = bene_patient_joined_pd.groupby(['Gender', 'ChronicCond_Cancer'])['Member Age'].aggregate({'min', 'max', "mean", "count"})

print(cancer_analysis)

sns.set_theme(style = "whitegrid")

countplt, cancer_analysis = plt.subplots(figsize = (8,11))


#Drawing the bar plot

cancer_analysis = sns.countplot(data = bene_patient_joined_pd,
                                x = 'ChronicCond_Cancer',
                                palette = "RdBu",
                                hue = 'Gender')


#Adding Chart and Axes Titles

cancer_analysis.set_title(' \n Cancer by Gender \n ', fontsize = 18, fontweight = 'bold')
cancer_analysis.set_xlabel(' \n Presence of Cancer \n ', fontsize = 15)
cancer_analysis.set_ylabel(' \n Member Count \n ', fontsize = 15)
plt.xticks(fontsize=13)


for bargraph in cancer_analysis.patches:
    cancer_analysis.text (bargraph.get_x() + bargraph.get_width() / 2,
                          bargraph.get_height() + 0.75,
                          bargraph.get_height(),
                          horizontalalignment = 'center',
                          fontsize = 11)

"""### Cancer and Annual Inpatient Deductible and Reimbursement Expenses Amongst Members

The first graph with annual inpatient deductible shows that the members with and without cancer pay almost the same deductible. As a suggestion, the insurance company should reduce deductible for those without cancer so that they are not paying a large sum out of pocket when they do not have this chronic condition.

The second graph with annual outpatient deductible shows that the insurance company pays almost the same amount of reimbursement for members with and without cancer. This would mean that the company is paying more than they should be for members with cancer. This could be address if the deductible was increased for those with cancer as well as increased copayment for inpatient services.
"""

sns.set_theme(style = "whitegrid")
plt.figure(figsize = (8,11))

cancer_IPAnnDeduc = bene_patient_joined_pd.groupby(['ChronicCond_Cancer'])['IPAnnualDeductibleAmt'].mean().plot(kind='bar', color=['lightcoral','lightgreen'])

cancer_IPAnnDeduc.set_title(' \n Cancer and Annual Inpatient Deductible \n ', fontsize = 18, fontweight = 'bold')
cancer_IPAnnDeduc.set_xlabel(' \n Presence of Cancer \n ', fontsize = 15)
cancer_IPAnnDeduc.set_ylabel(' \n Total Annual Average for Inpatient Deductible (in thousands of U.S.Dollars) \n ', fontsize = 15)
plt.xticks(fontsize = 13, rotation = 0)


for bargraph in cancer_IPAnnDeduc.patches:
    cancer_IPAnnDeduc.text (bargraph.get_x() + bargraph.get_width() / 2,
              bargraph.get_height() + 0.75, '{0:.2f}'.format(bargraph.get_height()),
              horizontalalignment = 'center',
                            fontsize = 11)

sns.set_theme(style = "whitegrid")
plt.figure(figsize = (8,11))

cancer_IPAnnReim = bene_patient_joined_pd.groupby(['ChronicCond_Cancer'])['IPAnnualReimbursementAmt'].mean().plot(kind='bar', color=['lightcoral','lightgreen'])

cancer_IPAnnReim.set_title(' \n Cancer and Annual Inpatient Reimbursement \n ', fontsize = 18, fontweight = 'bold')
cancer_IPAnnReim.set_xlabel(' \n Presence of Cancer \n ', fontsize = 15)
cancer_IPAnnReim.set_ylabel(' \n Total Annual Average for Inpatient Reimbursement (in thousands of U.S. Dollars) \n ', fontsize = 15)
plt.xticks(fontsize = 13, rotation = 0)


for bargraph in cancer_IPAnnReim.patches:
    cancer_IPAnnReim.text (bargraph.get_x() + bargraph.get_width() / 2,
              bargraph.get_height() + 0.75, '{0:.2f}'.format(bargraph.get_height()),
              horizontalalignment = 'center',
                           fontsize = 11)

"""The Chi-Squared test results from above between 'Gender' and 'ChronicCond_Cancer' shows that there is no correlation between the two variables as the p-value is 2.86, which is way above p-value of 0.5. Therefore, we fail to reject the null hypothesis as there is no strong correlation between gender and those members with cancer."""

CrosstabResult=pd.crosstab(index=bene_patient_joined_pd['ChronicCond_Cancer'],
                           columns=bene_patient_joined_pd['Gender'])
print(CrosstabResult)

# importing the required function
from scipy.stats import chi2_contingency

# Performing Chi-sq test
ChiSqResult = chi2_contingency(CrosstabResult)

# P-Value is the Probability of H0 being True
# If P-Value&gt;0.05 then only we Accept the assumption(H0)

print('The P-Value of the ChiSq Test is:', ChiSqResult[1])

CrosstabResult.plot.bar(figsize = (8, 11), rot = 0)

"""## Member Analysis by Alzheimer's and Medical Expenses

Alzheimer's is a form of dementia that impacts a person's memory and behavior and their ability to think and accounts for 60-80% of dementia cases. As the disease onsets further, the symptoms get severe that makes it impossible for a person to function and complete daily tasks without someone's help (Alzheimer's Association). It is important to know that just because a person is facing memory loss does not mean that they have Alzheimer's as there are other causes and reasons for it. Causes for Alzheimer's are "destruction and death" of nerve cells that lead to memory failure amongst other symptoms mentioned earlier. Some of the other symptoms are trouble with recognition, mood changes, deeping confusion, disorientation, and difficulty speaking amongst others (Alzheimer's Association).

It is important that all members with Alzheimer's receive the proper care necessary. Therefore, one of the services that the insurance company can offer to its members with Alzheimer's is adult day care or senior living centers for a fee so that they are being taken care of. The insurance company can also partner with third party licensed providers who are able to provide stay-at-home senior care for a fee if senior living or adult day care is not an option.

Below summary of Alzheimer's feature by member age and gender shows that most members do not have Alzheimer's. However, more male member do have Alzheimer's at 56,885 males compared to females at 40,646. More male members do not have Alzheimer's at 44,119 males compared to females at 31,932.

The minimum age for males with cancer is 26.1 years and maximum is 75.53. The minimum age for females with cancer is 26.2 years and maximum is 73.11. One thing we can conclude is that females are prone to reporting this indicator a bit later than males and also live a bit younger with this indicator.
"""

alzheimer_analysis = bene_patient_joined_pd.groupby(['Gender', 'ChronicCond_Alzheimer'])['Member Age'].aggregate({'min', 'max', "mean", "count"})

print(alzheimer_analysis)

sns.set_theme(style = "whitegrid")

countplt, alzheimer_analysis = plt.subplots(figsize = (8,11))


#Drawing the bar plot

alzheimer_analysis = sns.countplot(data = bene_patient_joined_pd, x = 'ChronicCond_Cancer', palette = "RdBu", hue = 'Gender')


#Adding Chart and Axes Titles

alzheimer_analysis.set_title(' \n Alzheimers by Gender \n ', fontsize = 18, fontweight = 'bold')
alzheimer_analysis.set_xlabel(' \n Presence of Alzheimers \n ', fontsize = 15)
alzheimer_analysis.set_ylabel(' \n Member Count \n ', fontsize = 15)
plt.xticks(fontsize = 13)


for bargraph in alzheimer_analysis.patches:
    alzheimer_analysis.text (bargraph.get_x() + bargraph.get_width() / 2,
                             bargraph.get_height() + 0.75, bargraph.get_height(),
                             horizontalalignment = 'center',
                             fontsize = 11)

"""### Alzheimer's and Annual Inpatient Deductible and Reimbursement Expenses Amongst Members

From below, the first graph with annual inpatient deductible shows that the members with and without Alzheimer's pay almost the same deductible. As a suggestion, the insurance company should reduce deductible for those without Alzheimer's so that they are not paying a large sum out of pocket when they do not have this chronic condition.

The second graph with annual outpatient deductible shows that the insurance company pays almost the same amount of reimbursement for members with and without Alzheimer's. This would mean that the company is paying more than they should be for members with Alzheimer's. This could be address if the deductible was increased for those with Alzheimer's as well as increased copayment for inpatient services. The extra income for the insurance company can also come from the additional servicces provided to the members.
"""

sns.set_theme(style="whitegrid")
plt.figure(figsize=(8,11))

alzheimer_IPAnnDeduc = bene_patient_joined_pd.groupby(['ChronicCond_Alzheimer'])['IPAnnualDeductibleAmt'].mean().plot(kind='bar', color = ['lightcoral','lightgreen'])

alzheimer_IPAnnDeduc.set_title(' \n Alzheimers and Annual Inpatient Deductible \n ', fontsize = 18, fontweight = 'bold')
alzheimer_IPAnnDeduc.set_xlabel(' \n Presence of Alzheimers \n ', fontsize = 15)
alzheimer_IPAnnDeduc.set_ylabel(' \n Total Annual Average for Inpatient Deductible (in thousands of U.S.Dollars) \n ', fontsize = 15)
plt.xticks(fontsize=13, rotation = 0)


for bargraph in alzheimer_IPAnnDeduc.patches:
    alzheimer_IPAnnDeduc.text (bargraph.get_x() + bargraph.get_width() / 2,
              bargraph.get_height() + 0.75, '{0:.2f}'.format(bargraph.get_height()),
              horizontalalignment = 'center',
                               fontsize = 11)

sns.set_theme(style = "whitegrid")
plt.figure(figsize = (8,11))

alzheimer_IPAnnReim = bene_patient_joined_pd.groupby(['ChronicCond_Alzheimer'])['IPAnnualReimbursementAmt'].mean().plot(kind='bar', color = ['lightcoral','lightgreen'])

alzheimer_IPAnnReim.set_title(' \n Alzheimers and Annual Inpatient Reimbursement \n ', fontsize = 18, fontweight = 'bold')
alzheimer_IPAnnReim.set_xlabel(' \n Presence of Alzheimers \n ', fontsize = 15)
alzheimer_IPAnnReim.set_ylabel(' \n Total Annual Average for Inpatient Reimbursement (in thousands of U.S. Dollars) \n ', fontsize = 15)
plt.xticks(fontsize = 13, rotation = 0)


for bargraph in alzheimer_IPAnnReim.patches:
    alzheimer_IPAnnReim.text (bargraph.get_x() + bargraph.get_width() / 2,
              bargraph.get_height() + 0.75, '{0:.2f}'.format(bargraph.get_height()),
              horizontalalignment = 'center',
                              fontsize = 11)

"""The Chi-Squared test results from above between 'Gender' and 'ChronicCond_Alzheimer' shows that there is strong correlation between the two variables as the p-value is 0.19, which is less than 0.5, and closer to 0. Therefore, we reject the null hypothesis as there is a strong correlation between gender and those members with Alzheimer's disease. This analysis can be useful to the insurance company as they can monitor or charge those members a higher premium or increase inpatient deductible so that the annual inpatient reimbursement is lower for the company. On the other hand, the insurance company can continue to provide more benefits to it's members with Alzheimer's disease such as adult day care or senior living centers for a fee or free-of-charge so that they are being taken care of. The insurance company can also partner with third party licensed providers who are able to provide stay-at-home senior care for a fee if senior living or adult day care is not an option."""

CrosstabResult = pd.crosstab(index = bene_patient_joined_pd['ChronicCond_Alzheimer'],
                           columns = bene_patient_joined_pd['Gender'])
print(CrosstabResult)

# importing the required function
from scipy.stats import chi2_contingency

# Performing Chi-sq test
ChiSqResult = chi2_contingency(CrosstabResult)

# P-Value is the Probability of H0 being True
# If P-Value 0.05 then only we Accept the assumption(H0)

print('The P-Value of the ChiSq Test is: ', ChiSqResult[1])

CrosstabResult.plot.bar(figsize = (8, 11), rot = 0)

"""# Step Three: Push CSV Files to Hive as Tables"""

df=spark.sql("show databases")
df.show()

datafile=spark.read.csv("/FileStore/tables/Train_Beneficiarydata_1542865627584.csv",header=True)
datafile.show(5)
datafile.write.saveAsTable("beneficiary_table1")

datafile=spark.read.csv("/FileStore/tables/Train_Inpatientdata_1542865627584.csv",header=True)
datafile.show(5)
datafile.write.saveAsTable("inpatient_table2")

datafile=spark.read.csv("/FileStore/tables/Train_Outpatientdata_1542865627584.csv",header=True)
datafile.show(5)
datafile.write.saveAsTable("outpatient_table2")

"""#References:

Dataset Source Credit:
* Gupta, R. A. (2019, May 9). Healthcare Provider Fraud Detection Analysis. Kaggle. Retrieved October 15, 2022, from https://www.kaggle.com/datasets/rohitrox/healthcare-provider-fraud-detection-analysis
***
* Mayo Foundation for Medical Education and Research. (2021, September 3). Chronic kidney disease. Mayo Clinic. Retrieved November 14, 2022, from https://www.mayoclinic.org/diseases-conditions/chronic-kidney-disease/symptoms-causes/syc-20354521#:~:text=Diabetes%20is%20the%20most%20common,to%20long%2Dterm%20functional%20decline.

* Chou, V. (2019, February 27). How science and genetics are reshaping the race debate of the 21st Century. Science in the News. Retrieved November 14, 2022, from https://sitn.hms.harvard.edu/flash/2017/science-genetics-reshaping-race-debate-21st-century/#:~:text=(A)%20The%20old%20concept%20of,a%20relatively%20uniform%20genetic%20identity.

* List of states in the United States. Drupal.org. (2016, December 9). Retrieved November 14, 2022, from https://www.drupal.org/node/332575  



* Leena, P. (2022, October 4). Inpatient vs. outpatient: What employers need to know. Mednefits. Retrieved November 24, 2022, from https://www.mednefits.com/blog/inpatient-vs-outpatient-what-employers-need-to-know/
* Centers for Disease Control and Prevention. (2022, September 6). FASTSTATS - leading causes of death. Centers for Disease Control and Prevention. Retrieved November 24, 2022, from https://www.cdc.gov/nchs/fastats/leading-causes-of-death.htm
* What is cancer?: Cancer basics. American Cancer Society. (n.d.). Retrieved November 24, 2022, from https://www.cancer.org/treatment/understanding-your-diagnosis.html.
* What is Alzheimer's Disease? Alzheimer's Disease and Dementia. (n.d.). Retrieved November 24, 2022, from https://www.alz.org/alzheimers-dementia/what-is-alzheimers
"""